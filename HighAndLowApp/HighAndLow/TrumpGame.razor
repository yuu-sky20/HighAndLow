@page "/"

<TelerikMediaQuery Media="(max-width: 600px)" OnChange="((changed) => Mobile = changed)"></TelerikMediaQuery>

<h1>High and Low</h1>

@if (Mobile) {
	<div class="d-flex flex-column gap-2">
		<TrumpTemplate Mobile="Mobile" Card="Cards.enemyCard" />
		<TrumpTemplate Mobile="Mobile" Card="Cards.myCard" />
	</div>
} else {
	<div class="d-flex flex-row gap-2">
		<TrumpTemplate Mobile="Mobile" Card="Cards.enemyCard" />
		<TrumpTemplate Mobile="Mobile" Card="Cards.myCard" />
	</div>
}

<br />
<div class="text-center mx-auto">
	<label class="fs-5">Winning: @winningCount</label>
	<br />
	<label class="fs-1">@message</label>
</div>

<div class="d-flex flex-column justify-content-center">
	<div class="d-flex flex-row justify-content-around my-5">
		<TelerikRadioGroup
			Data="@HighAndLow"
			@bind-Value="@ChosenHighAndLow"
			ValueField="@nameof(GameController.HighAndLow)"
			TextField="@nameof(GameController.HighAndLow)"
			Class="fs-6 px-2"
			Layout="RadioGroupLayout.Horizontal">
		</TelerikRadioGroup>
	</div>
	<div class="d-flex flex-column justify-content-center mb-5">
		<div class="justify-content-center d-inline-flex">
			<button type="button" @onclick="OnClickedJudgeButton" class="btn btn-primary" hidden=@judgeButtonEnabled>DUEL</button>
		</div>
		<div class="justify-content-center d-inline-flex">
			<button type="button" @onclick="OnClickedRetryGameButton" class="btn btn-secondary" hidden=@retryGameButtonEnabled>Retry</button>
		</div>
	</div>
</div>

@code
{
	public bool Mobile { get; set; }

	private TelerikRadioGroup<GameController.HighAndLow, int?> RadioGroupRef { get; set; }
	private int ChosenHighAndLow { get; set; }
	private List<GameController.HighAndLow> HighAndLow { get; set; } = new List<GameController.HighAndLow>
	{
		GameController.HighAndLow.LOW,
		GameController.HighAndLow.HIGH
	};


	private GameController gameController = new GameController();
	private bool judgeButtonEnabled = false;
	private bool retryGameButtonEnabled = true;
	private int winningCount = 0;
	private string message = "";

	public (TrumpModel.Trump? enemyCard, TrumpModel.Trump? myCard) Cards { get; set; }

	private void OnClickedJudgeButton(EventArgs e)
	{
		this.Cards = gameController.OpenCards();
		this.judgeButtonEnabled = true;
		this.retryGameButtonEnabled = false;
		(bool f, winningCount) = gameController.JudgeCards((GameController.HighAndLow)ChosenHighAndLow);
		if (f)
		{
			this.message = "Win!";
		} else
		{
			this.message = "Lose...";
		}
	}

	private void OnClickedRetryGameButton(EventArgs e)
	{
		Cards = gameController.GenerateCards();
		this.judgeButtonEnabled = false;
		this.retryGameButtonEnabled = true;
		this.message = "";
	}

	protected override void OnInitialized()
	{
		Cards = gameController.GenerateCards();
	}
}
